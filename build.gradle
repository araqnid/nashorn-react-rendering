apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'

mainClassName = 'org.araqnid.testbed.jreact.Main'
sourceCompatibility = 1.8
version = '0.0.' + (System.getenv("BUILD_NUMBER") ?: System.getenv("TRAVIS_BUILD_NUMBER") ?: "0")

ext {
  reactVersion = '0.13.0'
  jettyVersion = '9.2.10.v20150310'
  jacksonVersion = '2.5.1'
  resteasyVersion = '3.0.10.Final'
  hibernateVersion = '4.3.8.Final'
}

jar {
    manifest {
        attributes 'Implementation-Title': project.description ?: project.name,
                   'Implementation-Version': version,
                   'X-Service-Class': mainClassName
    }
}

sourceSets {
    integrationTest {
        compileClasspath += main.output + test.output;
        runtimeClasspath += main.output + test.output;
    }
    browserTest {
        compileClasspath += main.output;
        runtimeClasspath += main.output;
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
    browserTestCompile.extendsFrom testCompile
    browserTestRuntime.extendsFrom testRuntime
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'com.google.guava:guava:18.0'
    compile 'com.google.inject:guice:3.0'
    compile 'com.google.inject.extensions:guice-servlet:3.0'
    compile 'com.google.inject.extensions:guice-multibindings:3.0'
    compile 'org.slf4j:slf4j-api:1.7.10'
    compile 'org.eclipse.jetty:jetty-server:' + jettyVersion
    compile 'org.eclipse.jetty:jetty-servlet:' + jettyVersion
    compile 'com.google.code.findbugs:jsr305:3.0.0'
    compile 'org.jboss.resteasy:resteasy-jaxrs:' + resteasyVersion
    compile 'org.jboss.resteasy:resteasy-guice:' + resteasyVersion
    compile 'org.jboss.resteasy:resteasy-jackson2-provider:' + resteasyVersion
    compile 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:' + jacksonVersion
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-joda:' + jacksonVersion
    compile 'com.fasterxml.jackson.module:jackson-module-guice:' + jacksonVersion
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-guava:' + jacksonVersion
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jdk7:' + jacksonVersion
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:' + jacksonVersion
    runtime 'ch.qos.logback:logback-classic:1.1.2'
    runtime 'org.webjars:react:' + reactVersion
    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'org.hamcrest:hamcrest-integration:1.3'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testRuntime 'org.webjars:react:' + reactVersion
    browserTestCompile ('org.seleniumhq.selenium:selenium-java:2.42.2') {
        exclude module: 'httpclient'
    }
    integrationTestCompile 'org.apache.httpcomponents:httpclient:4.4'
    // marking this as integrationTestCompile causes a conflict for Eclipse which tries to take the transitive 4.2 version via resteasy too
    compile 'org.apache.httpcomponents:httpclient:4.4'
}

task runtimeDeps(dependsOn: 'processResources') {
    def sha1 = java.security.MessageDigest.getInstance("SHA-1")
    def metainf = new File("$buildDir/resources/main/META-INF")
    def depsFile = new File(metainf, project.name + ".deps.txt")

    outputs.file depsFile
    outputs.upToDateWhen {
        if (!depsFile.exists()) return false
        def currentContent = depsFile.text
        def newArtifacts = 0
        configurations.runtime.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            if (currentContent.indexOf(' ' + artifact.moduleVersion.id + ' ' + artifact.type + '\n') < 0) newArtifacts++
        }
        return newArtifacts == 0
    }

    doLast {
        metainf.mkdirs()
        depsFile.text = ''
        configurations.runtime.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            depsFile.text += sha1.digest(artifact.file.bytes).collect {String.format "%02x", it}.join() + ' ' + artifact.moduleVersion.id + ' ' + artifact.type + '\n'
        }
    }
}

jar.dependsOn(runtimeDeps)

task reactVersionProperties {
    def sourceSet = project.sourceSets.main
    def generatedSourceDir = new File("${project.buildDir}/generated-sources/${sourceSet.name}")
    def versionPropertiesFile = new File(generatedSourceDir, "org/araqnid/testbed/jreact/react.version.properties")
    outputs.dir generatedSourceDir
    outputs.upToDateWhen { versionPropertiesFile.exists() && versionPropertiesFile.text.indexOf(project.ext.reactVersion) > 0 }
    outputs.file versionPropertiesFile
    sourceSet.resources.srcDir generatedSourceDir
    def processResourcesTask = project.tasks.getByName(sourceSet.processResourcesTaskName)
    processResourcesTask.dependsOn(project.tasks.getByName("reactVersionProperties"))
    doLast {
        new File(versionPropertiesFile.parent).mkdirs()
        versionPropertiesFile.text = "react.version=" + project.ext.reactVersion + "\n"
    }
}

task integrationTest(type: Test, dependsOn: 'test') {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

task browserTest(type: Test) {
    testClassesDir = sourceSets.browserTest.output.classesDir
    classpath = sourceSets.browserTest.runtimeClasspath
}

build.dependsOn(integrationTestClasses, browserTestClasses)
check.dependsOn(integrationTest)

eclipse {
    classpath {
        plusConfigurations += configurations.integrationTestCompile;
        plusConfigurations += configurations.browserTestCompile;
    }
}
